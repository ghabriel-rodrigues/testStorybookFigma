{
  "version": 3,
  "sources": ["dep:@storybook_react", "../../../../../node_modules/@storybook/react/dist/esm/client/index.js", "../../../../../node_modules/@storybook/react/dist/esm/client/preview/index.js", "../../../../../node_modules/@storybook/react/dist/esm/client/preview/globals.js", "../../../../../node_modules/@storybook/react/dist/esm/client/testing/index.js", "../../../../../node_modules/@storybook/react/dist/esm/client/preview/types-6-3.js", "../../../../../node_modules/@storybook/react/dist/esm/client/preview/types-6-0.js"],
  "sourcesContent": ["\nexport * from \"../../node_modules/@storybook/react/dist/esm/client/index.js\"", "export { storiesOf, setAddon, addDecorator, addParameters, configure, getStorybook, raw, forceReRender } from './preview';\nexport * from './testing';\nexport * from './preview/types-6-3';\n\nif (module && module.hot && module.hot.decline) {\n  module.hot.decline();\n}", "import \"core-js/modules/es.array.concat.js\";\n\n/* eslint-disable prefer-destructuring */\nimport { start } from '@storybook/core';\nimport './globals';\nimport { renderToDOM, render } from './render';\nvar framework = 'react';\nvar api = start(renderToDOM, {\n  render: render\n});\nexport var storiesOf = function storiesOf(kind, m) {\n  return api.clientApi.storiesOf(kind, m).addParameters({\n    framework: framework\n  });\n};\nexport var configure = function configure() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return api.configure.apply(api, [framework].concat(args));\n};\nexport var addDecorator = api.clientApi.addDecorator;\nexport var addParameters = api.clientApi.addParameters;\nexport var clearDecorators = api.clientApi.clearDecorators;\nexport var setAddon = api.clientApi.setAddon;\nexport var forceReRender = api.forceReRender;\nexport var getStorybook = api.clientApi.getStorybook;\nexport var raw = api.clientApi.raw;", "import global from 'global';\nvar globalWindow = global.window;\n\nif (globalWindow) {\n  globalWindow.STORYBOOK_ENV = 'react';\n}", "import { composeStory as originalComposeStory, composeStories as originalComposeStories, setProjectAnnotations as originalSetProjectAnnotations } from '@storybook/store';\nimport { once } from '@storybook/client-logger';\nimport { render } from '../preview/render';\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setProjectAnnotations } from '@storybook/react';\n * import * as projectAnnotations from './.storybook/preview';\n *\n * setProjectAnnotations(projectAnnotations);\n *```\n *\n * @param projectAnnotations - e.g. (import * as projectAnnotations from '../.storybook/preview')\n */\nexport function setProjectAnnotations(projectAnnotations) {\n  originalSetProjectAnnotations(projectAnnotations);\n}\n/** Preserved for users migrating from `@storybook/testing-react`.\n *\n * @deprecated Use setProjectAnnotations instead\n */\n\nexport function setGlobalConfig(projectAnnotations) {\n  once.warn(\"setGlobalConfig is deprecated. Use setProjectAnnotations instead.\");\n  setProjectAnnotations(projectAnnotations);\n} // This will not be necessary once we have auto preset loading\n\nvar defaultProjectAnnotations = {\n  render: render\n};\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally projectAnnotations e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param componentAnnotations - e.g. (import Meta from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n * @param [exportsName] - in case your story does not contain a name and you want it to have a name.\n */\n\nexport function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {\n  return originalComposeStory(story, componentAnnotations, projectAnnotations, defaultProjectAnnotations, exportsName);\n}\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally projectAnnotations (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param csfExports - e.g. (import * as stories from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n */\n\nexport function composeStories(csfExports, projectAnnotations) {\n  var composedStories = originalComposeStories(csfExports, projectAnnotations, composeStory);\n  return composedStories;\n}", "export * from './types-6-0';\n/**\n * For the common case where a component's stories are simple components that receives args as props:\n *\n * ```tsx\n * export default { ... } as ComponentMeta<typeof Button>;\n * ```\n */\n\nexport {};", "export {};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;;;ACAA;AAAA;;;ACAA;AAAA,oBAAmB;AACnB,IAAI,eAAe,sBAAO;AAE1B,IAAI,cAAc;AAChB,eAAa,gBAAgB;AAC/B;;;ADCA,IAAI,YAAY;AAChB,IAAI,MAAM,MAAM,aAAa;AAAA,EAC3B;AACF,CAAC;AACM,IAAI,YAAY,oBAAmB,MAAM,GAAG;AACjD,SAAO,IAAI,UAAU,UAAU,MAAM,CAAC,EAAE,cAAc;AAAA,IACpD;AAAA,EACF,CAAC;AACH;AACO,IAAI,YAAY,sBAAqB;AAC1C,WAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,SAAK,QAAQ,UAAU;AAAA,EACzB;AAEA,SAAO,IAAI,UAAU,MAAM,KAAK,CAAC,SAAS,EAAE,OAAO,IAAI,CAAC;AAC1D;AACO,IAAI,eAAe,IAAI,UAAU;AACjC,IAAI,gBAAgB,IAAI,UAAU;AAClC,IAAI,kBAAkB,IAAI,UAAU;AACpC,IAAI,WAAW,IAAI,UAAU;AAC7B,IAAI,gBAAgB,IAAI;AACxB,IAAI,eAAe,IAAI,UAAU;AACjC,IAAI,MAAM,IAAI,UAAU;;;AE5B/B;AACA;AAkBO,gCAA+B,oBAAoB;AACxD,wBAA8B,kBAAkB;AAClD;AAMO,yBAAyB,oBAAoB;AAClD,OAAK,KAAK,mEAAmE;AAC7E,yBAAsB,kBAAkB;AAC1C;AAEA,IAAI,4BAA4B;AAAA,EAC9B;AACF;AA6BO,uBAAsB,OAAO,sBAAsB,oBAAoB,aAAa;AACzF,SAAO,aAAqB,OAAO,sBAAsB,oBAAoB,2BAA2B,WAAW;AACrH;AA2BO,yBAAwB,YAAY,oBAAoB;AAC7D,MAAI,kBAAkB,eAAuB,YAAY,oBAAoB,aAAY;AACzF,SAAO;AACT;;;AC/FA;;;ACAA;;;ALIA,IAAI,UAAU,OAAO,OAAO,OAAO,IAAI,SAAS;AAC9C,SAAO,IAAI,QAAQ;AACrB;",
  "names": []
}
