{
  "version": 3,
  "sources": ["../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/index.ts", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusRing.tsx", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts", "../../../../../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './FocusScope';\nexport * from './FocusRing';\nexport * from './useFocusable';\nexport * from './useFocusRing';\nexport * from './focusSafely';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// import {FocusScope, useFocusScope} from 'react-events/focus-scope';\n// export {FocusScope};\n\ninterface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\ninterface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: HTMLElement,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): HTMLElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): HTMLElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): HTMLElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): HTMLElement\n}\n\ntype ScopeRef = RefObject<HTMLElement[]>;\ninterface IFocusContext {\n  scopeRef: ScopeRef,\n  focusManager: FocusManager\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\nlet scopes: Map<ScopeRef, ScopeRef | null> = new Map();\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<HTMLElement[]>([]);\n  let ctx = useContext(FocusContext);\n  let parentScope = ctx?.scopeRef;\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n\n  useLayoutEffect(() => {\n    scopes.set(scopeRef, parentScope);\n    return () => {\n      // Restore the active scope on unmount if this scope or a descendant scope is active.\n      // Parent effect cleanups run before children, so we need to check if the\n      // parent scope actually still exists before restoring the active scope to it.\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || scopes.has(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      scopes.delete(scopeRef);\n    };\n  }, [scopeRef, parentScope]);\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={{scopeRef, focusManager}}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<HTMLElement[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as HTMLElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as HTMLElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as HTMLElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as HTMLElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: HTMLElement[]) {\n  return scope[0].parentElement;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<HTMLElement[]>, contain: boolean) {\n  let focusedNode = useRef<HTMLElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== activeScope) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as HTMLElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (scopeRef === activeScope && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (scopeRef === activeScope) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (scopeRef === activeScope && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  for (let scope of scopes.keys()) {\n    if (isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isElementInScope(element: Element, scope: HTMLElement[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let s of scopes.keys()) {\n    if ((s === scope || isAncestorScope(scope, s)) && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = scopes.get(scope);\n  if (!parent) {\n    return false;\n  }\n\n  if (parent === ancestor) {\n    return true;\n  }\n\n  return isAncestorScope(ancestor, parent);\n}\n\nfunction focusElement(element: HTMLElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: HTMLElement[]) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n  walker.currentNode = sentinel;\n  focusElement(walker.nextNode() as HTMLElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<HTMLElement[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, []);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<HTMLElement[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as HTMLElement : null);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && isElementInScope(document.activeElement, scopeRef.current)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: HTMLElement, opts?: FocusManagerOptions, scope?: HTMLElement[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as HTMLElement).matches(selector)\n          && isElementVisible(node as HTMLElement)\n          && (!scope || isElementInScope(node as HTMLElement, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<HTMLElement>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as HTMLElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as HTMLElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: HTMLElement;\n  let last: HTMLElement;\n  do {\n    last = walker.lastChild() as HTMLElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: HTMLElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\ninterface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n", "import {HTMLAttributes, useCallback, useState} from 'react';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useRef} from 'react';\n\ninterface FocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: FocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableDOMProps, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {HTMLAttributes, MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\ninterface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusableProviderProps extends HTMLAttributes<HTMLElement> {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<HTMLElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<HTMLElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<HTMLElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\ninterface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<HTMLElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
