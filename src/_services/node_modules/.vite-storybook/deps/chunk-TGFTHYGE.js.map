{
  "version": 3,
  "sources": ["../../../../../node_modules/@radix-ui/react-use-layout-effect/dist/packages/react/use-layout-effect/src/useLayoutEffect.tsx", "../../../../../node_modules/@radix-ui/react-id/dist/packages/react/id/src/id.tsx", "../../../../../node_modules/@radix-ui/react-context/dist/packages/react/context/src/createContext.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\n/**\n * On the server, React emits a warning when calling `useLayoutEffect`.\n * This is because neither `useLayoutEffect` nor `useEffect` run on the server.\n * We use this safe version which suppresses the warning by replacing it with a noop on the server.\n *\n * See: https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n */\nconst useLayoutEffect = Boolean(globalThis?.document) ? React.useLayoutEffect : () => {};\n\nexport { useLayoutEffect };\n", "import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\n// We `toString()` to prevent bundlers from trying to `import { useId } from 'react';`\nconst useReactId = (React as any)['useId'.toString()] || (() => undefined);\nlet count = 0;\n\nfunction useId(deterministicId?: string): string {\n  const [id, setId] = React.useState<string | undefined>(useReactId());\n  // React versions older than 18 will have client-side ids only.\n  useLayoutEffect(() => {\n    if (!deterministicId) setId((reactId) => reactId ?? String(count++));\n  }, [deterministicId]);\n  return deterministicId || (id ? `radix-${id}` : '');\n}\n\n// DEPRECATED\nfunction IdProvider({ children }: { children: React.ReactNode }) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(ID_PROVIDER_DEPRECATED);\n    }\n  }, []);\n  return <>{children}</>;\n}\n\nconst ID_PROVIDER_DEPRECATED = `Warning: The \\`IdProvider\\` has been deprecated. For details, see https://radix-ui.com/docs/primitives/utilities/id-provider`;\n\nexport { IdProvider, useId };\n", "import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"],
  "mappings": "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",
  "names": []
}
