import "./chunk-5JEIKDYP.js";
import {
  action,
  withActions
} from "./chunk-NF2RP2ES.js";
import "./chunk-H732LWTH.js";
import "./chunk-PGBMQPKU.js";
import "./chunk-HK2OX3QG.js";
import "./chunk-BT2R6PHY.js";
import "./chunk-YOWMQDKX.js";
import "./chunk-WJU63UQY.js";
import "./chunk-K6BYBXOF.js";
import "./chunk-2JQNWCDR.js";
import "./chunk-FLGAGSWC.js";
import {
  init_es_array_from,
  init_es_function_name,
  init_es_object_entries
} from "./chunk-IEJL2VHQ.js";
import {
  init_es_symbol,
  init_es_symbol_description,
  init_es_symbol_iterator
} from "./chunk-5PC5L4RD.js";
import "./chunk-FU46GFPX.js";
import "./chunk-X4Y2YCJG.js";
import "./chunk-YRI5EKND.js";
import {
  init_es_array_filter
} from "./chunk-NOABABRN.js";
import {
  init_es_array_slice,
  init_es_regexp_to_string
} from "./chunk-54NRONR2.js";
import "./chunk-4IIV2ADA.js";
import "./chunk-D3ACESPY.js";
import "./chunk-VS44KTAA.js";
import "./chunk-VMUWK5C6.js";
import "./chunk-7SJBK2FH.js";
import {
  require_es_regexp_exec
} from "./chunk-KSH4CLNA.js";
import {
  init_web_dom_collections_iterator,
  require_es_array_iterator,
  require_es_string_iterator
} from "./chunk-46JCISDI.js";
import {
  init_es_object_to_string
} from "./chunk-SHSATIAD.js";
import "./chunk-HRCPLZYU.js";
import {
  __toESM,
  init_define_import_meta_env
} from "./chunk-CCD2FOVN.js";

// dep:@storybook_addon-actions_preview_js
init_define_import_meta_env();

// node_modules/@storybook/addon-actions/preview.js
init_define_import_meta_env();

// node_modules/@storybook/addon-actions/dist/esm/preset/preview.js
init_define_import_meta_env();

// node_modules/@storybook/addon-actions/dist/esm/preset/addDecorator.js
init_define_import_meta_env();
var decorators = [withActions];

// node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js
init_define_import_meta_env();

// node_modules/@storybook/addon-actions/dist/esm/preset/addArgsHelpers.js
init_define_import_meta_env();
var import_es_regexp_exec = __toESM(require_es_regexp_exec());
init_es_regexp_to_string();
init_es_array_filter();
init_es_object_to_string();
init_es_object_entries();
init_es_symbol();
init_es_symbol_description();
init_es_symbol_iterator();
var import_es_array_iterator = __toESM(require_es_array_iterator());
var import_es_string_iterator = __toESM(require_es_string_iterator());
init_web_dom_collections_iterator();
init_es_array_slice();
init_es_function_name();
init_es_array_from();
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var isInInitialArgs = function isInInitialArgs2(name, initialArgs) {
  return typeof initialArgs[name] === "undefined" && !(name in initialArgs);
};
var inferActionsFromArgTypesRegex = function inferActionsFromArgTypesRegex2(context) {
  var initialArgs = context.initialArgs, argTypes = context.argTypes, actions = context.parameters.actions;
  if (!actions || actions.disable || !actions.argTypesRegex || !argTypes) {
    return {};
  }
  var argTypesRegex = new RegExp(actions.argTypesRegex);
  var argTypesMatchingRegex = Object.entries(argTypes).filter(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 1), name = _ref2[0];
    return !!argTypesRegex.test(name);
  });
  return argTypesMatchingRegex.reduce(function(acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), name = _ref4[0], argType = _ref4[1];
    if (isInInitialArgs(name, initialArgs)) {
      acc[name] = action(name);
    }
    return acc;
  }, {});
};
var addActionsFromArgTypes = function addActionsFromArgTypes2(context) {
  var initialArgs = context.initialArgs, argTypes = context.argTypes, actions = context.parameters.actions;
  if (actions !== null && actions !== void 0 && actions.disable || !argTypes) {
    return {};
  }
  var argTypesWithAction = Object.entries(argTypes).filter(function(_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2), name = _ref6[0], argType = _ref6[1];
    return !!argType.action;
  });
  return argTypesWithAction.reduce(function(acc, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 2), name = _ref8[0], argType = _ref8[1];
    if (isInInitialArgs(name, initialArgs)) {
      acc[name] = action(typeof argType.action === "string" ? argType.action : name);
    }
    return acc;
  }, {});
};

// node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js
var argsEnhancers = [addActionsFromArgTypes, inferActionsFromArgTypesRegex];
export {
  argsEnhancers,
  decorators
};
//# sourceMappingURL=@storybook_addon-actions_preview_js.js.map
