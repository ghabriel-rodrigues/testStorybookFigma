import {
  createContextScope,
  useId
} from "./chunk-TGFTHYGE.js";
import {
  Toggle
} from "./chunk-3UP2FQE7.js";
import {
  Primitive,
  Slot,
  composeEventHandlers,
  useCallbackRef,
  useComposedRefs,
  useControllableState
} from "./chunk-2I4RMD4V.js";
import {
  _extends,
  init_extends
} from "./chunk-OEZEVKV6.js";
import {
  require_react
} from "./chunk-TW7ERABM.js";
import "./chunk-ONM5EPDC.js";
import {
  __toESM,
  init_define_import_meta_env
} from "./chunk-CCD2FOVN.js";

// dep:@radix-ui_react-toggle-group
init_define_import_meta_env();

// node_modules/@radix-ui/react-toggle-group/dist/index.module.js
init_define_import_meta_env();

// node_modules/@radix-ui/react-roving-focus/dist/index.module.js
init_define_import_meta_env();

// node_modules/@radix-ui/react-collection/dist/index.module.js
init_define_import_meta_env();
var import_react = __toESM(require_react());
function createCollection(c) {
  const n2 = c + "CollectionProvider", [l2, i2] = createContextScope(n2), [f3, a] = l2(n2, { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }), u2 = (e) => {
    const { scope: r, children: t } = e, c2 = import_react.default.useRef(null), n3 = import_react.default.useRef(/* @__PURE__ */ new Map()).current;
    return import_react.default.createElement(f3, { scope: r, itemMap: n3, collectionRef: c2 }, t);
  }, m3 = c + "CollectionSlot", s3 = import_react.default.forwardRef((t, c2) => {
    const { scope: n3, children: l3 } = t, i3 = a(m3, n3), f4 = useComposedRefs(c2, i3.collectionRef);
    return import_react.default.createElement(Slot, { ref: f4 }, l3);
  }), p3 = c + "CollectionItemSlot", d3 = "data-radix-collection-item", R2 = import_react.default.forwardRef((t, c2) => {
    const { scope: n3, children: l3, ...i3 } = t, f4 = import_react.default.useRef(null), u3 = useComposedRefs(c2, f4), m4 = a(p3, n3);
    return import_react.default.useEffect(() => (m4.itemMap.set(f4, { ref: f4, ...i3 }), () => {
      m4.itemMap.delete(f4);
    })), import_react.default.createElement(Slot, { [d3]: "", ref: u3 }, l3);
  });
  return [{ Provider: u2, Slot: s3, ItemSlot: R2 }, function(e) {
    const r = a(c + "CollectionConsumer", e);
    return import_react.default.useCallback(() => {
      const e2 = r.collectionRef.current;
      if (!e2)
        return [];
      const t = Array.from(e2.querySelectorAll(`[${d3}]`));
      return Array.from(r.itemMap.values()).sort((e3, r2) => t.indexOf(e3.ref.current) - t.indexOf(r2.ref.current));
    }, [r.collectionRef, r.itemMap]);
  }, i2];
}

// node_modules/@radix-ui/react-roving-focus/dist/index.module.js
var s = __toESM(require_react());
init_extends();
var f = { bubbles: false, cancelable: true };
var [p, l, m] = createCollection("RovingFocusGroup");
var [d, v] = createContextScope("RovingFocusGroup", [m]);
var [g, F] = d("RovingFocusGroup");
var RovingFocusGroup = s.forwardRef((e, o2) => s.createElement(p.Provider, { scope: e.__scopeRovingFocusGroup }, s.createElement(p.Slot, { scope: e.__scopeRovingFocusGroup }, s.createElement(w, _extends({}, e, { ref: o2 })))));
var w = s.forwardRef((t, n2) => {
  const { __scopeRovingFocusGroup: c, orientation: p3, dir: m3 = "ltr", loop: d3 = false, currentTabStopId: v3, defaultCurrentTabStopId: F2, onCurrentTabStopIdChange: w2, onEntryFocus: b2, ...x } = t, E = s.useRef(null), I = useComposedRefs(n2, E), [G2 = null, h] = useControllableState({ prop: v3, defaultProp: F2, onChange: w2 }), [T2, A] = s.useState(false), y = useCallbackRef(b2), D = l(c), S = s.useRef(false);
  return s.useEffect(() => {
    const e = E.current;
    if (e)
      return e.addEventListener("rovingFocusGroup.onEntryFocus", y), () => e.removeEventListener("rovingFocusGroup.onEntryFocus", y);
  }, [y]), s.createElement(g, { scope: c, orientation: p3, dir: m3, loop: d3, currentTabStopId: G2, onItemFocus: s.useCallback((e) => h(e), [h]), onItemShiftTab: s.useCallback(() => A(true), []) }, s.createElement(Primitive.div, _extends({ tabIndex: T2 ? -1 : 0, "data-orientation": p3 }, x, { ref: I, style: { outline: "none", ...t.style }, onMouseDown: composeEventHandlers(t.onMouseDown, () => {
    S.current = true;
  }), onFocus: composeEventHandlers(t.onFocus, (e) => {
    const o2 = !S.current;
    if (e.target === e.currentTarget && o2 && !T2) {
      const o3 = new Event("rovingFocusGroup.onEntryFocus", f);
      if (e.currentTarget.dispatchEvent(o3), !o3.defaultPrevented) {
        const e2 = D().filter((e3) => e3.focusable);
        R([e2.find((e3) => e3.active), e2.find((e3) => e3.id === G2), ...e2].filter(Boolean).map((e3) => e3.ref.current));
      }
    }
    S.current = false;
  }), onBlur: composeEventHandlers(t.onBlur, () => A(false)) })));
});
var RovingFocusGroupItem = s.forwardRef((e, o2) => {
  const { __scopeRovingFocusGroup: n2, focusable: i2 = true, active: c = false, ...f3 } = e, m3 = useId(), d3 = F("RovingFocusGroupItem", n2), v3 = d3.currentTabStopId === m3, g3 = l(n2);
  return s.createElement(p.ItemSlot, { scope: n2, id: m3, focusable: i2, active: c }, s.createElement(Primitive.span, _extends({ tabIndex: v3 ? 0 : -1, "data-orientation": d3.orientation }, f3, { ref: o2, onMouseDown: composeEventHandlers(e.onMouseDown, (e2) => {
    i2 ? d3.onItemFocus(m3) : e2.preventDefault();
  }), onFocus: composeEventHandlers(e.onFocus, () => d3.onItemFocus(m3)), onKeyDown: composeEventHandlers(e.onKeyDown, (e2) => {
    if ("Tab" === e2.key && e2.shiftKey)
      return void d3.onItemShiftTab();
    if (e2.target !== e2.currentTarget)
      return;
    const o3 = function(e3, o4, r2) {
      const t2 = function(e4, o5) {
        return "rtl" !== o5 ? e4 : "ArrowLeft" === e4 ? "ArrowRight" : "ArrowRight" === e4 ? "ArrowLeft" : e4;
      }(e3.key, r2);
      return "vertical" === o4 && ["ArrowLeft", "ArrowRight"].includes(t2) || "horizontal" === o4 && ["ArrowUp", "ArrowDown"].includes(t2) ? void 0 : b[t2];
    }(e2, d3.orientation, d3.dir);
    if (void 0 !== o3) {
      e2.preventDefault();
      let n3 = g3().filter((e3) => e3.focusable).map((e3) => e3.ref.current);
      if ("last" === o3)
        n3.reverse();
      else if ("prev" === o3 || "next" === o3) {
        "prev" === o3 && n3.reverse();
        const i3 = n3.indexOf(e2.currentTarget);
        n3 = d3.loop ? (t = i3 + 1, (r = n3).map((e3, o4) => r[(t + o4) % r.length])) : n3.slice(i3 + 1);
      }
      setTimeout(() => R(n3));
    }
    var r, t;
  }) })));
});
var b = { ArrowLeft: "prev", ArrowUp: "prev", ArrowRight: "next", ArrowDown: "next", PageUp: "first", Home: "first", PageDown: "last", End: "last" };
function R(e) {
  const o2 = document.activeElement;
  for (const r of e) {
    if (r === o2)
      return;
    if (r.focus(), document.activeElement !== o2)
      return;
  }
}
var Root = RovingFocusGroup;
var Item = RovingFocusGroupItem;

// node_modules/@radix-ui/react-toggle-group/dist/index.module.js
var import_react2 = __toESM(require_react());
init_extends();
var [i, p2] = createContextScope("ToggleGroup", [v]);
var s2 = v();
var ToggleGroup = import_react2.default.forwardRef((e, o2) => {
  const { type: r, ...t } = e;
  if ("single" === r) {
    const e2 = t;
    return import_react2.default.createElement(m2, _extends({}, e2, { ref: o2 }));
  }
  if ("multiple" === r) {
    const e2 = t;
    return import_react2.default.createElement(d2, _extends({}, e2, { ref: o2 }));
  }
  throw new Error("Missing prop `type` expected on `ToggleGroup`");
});
var [u, g2] = i("ToggleGroup");
var m2 = import_react2.default.forwardRef((o2, r) => {
  const { value: t, defaultValue: a, onValueChange: l2 = () => {
  }, ...i2 } = o2, [p3, s3] = useControllableState({ prop: t, defaultProp: a, onChange: l2 });
  return import_react2.default.createElement(u, { scope: o2.__scopeToggleGroup, type: "single", value: p3 ? [p3] : [], onItemActivate: s3, onItemDeactivate: import_react2.default.useCallback(() => s3(""), [s3]) }, import_react2.default.createElement(G, _extends({}, i2, { ref: r })));
});
var d2 = import_react2.default.forwardRef((o2, r) => {
  const { value: t, defaultValue: a, onValueChange: l2 = () => {
  }, ...i2 } = o2, [p3 = [], s3] = useControllableState({ prop: t, defaultProp: a, onChange: l2 }), g3 = import_react2.default.useCallback((e) => s3((o3 = []) => [...o3, e]), [s3]), m3 = import_react2.default.useCallback((e) => s3((o3 = []) => o3.filter((o4) => o4 !== e)), [s3]);
  return import_react2.default.createElement(u, { scope: o2.__scopeToggleGroup, type: "multiple", value: p3, onItemActivate: g3, onItemDeactivate: m3 }, import_react2.default.createElement(G, _extends({}, i2, { ref: r })));
});
var [f2, v2] = i("ToggleGroup");
var G = import_react2.default.forwardRef((e, o2) => {
  const { __scopeToggleGroup: t, disabled: l2 = false, rovingFocus: i2 = true, orientation: p3, dir: u2 = "ltr", loop: g3 = true, ...m3 } = e, d3 = s2(t), v3 = { role: "group", dir: u2, ...m3 };
  return import_react2.default.createElement(f2, { scope: t, rovingFocus: i2, disabled: l2 }, i2 ? import_react2.default.createElement(Root, _extends({ asChild: true }, d3, { orientation: p3, dir: u2, loop: g3 }), import_react2.default.createElement(Primitive.div, _extends({}, v3, { ref: o2 }))) : import_react2.default.createElement(Primitive.div, _extends({}, v3, { ref: o2 })));
});
var ToggleGroupItem = import_react2.default.forwardRef((e, o2) => {
  const t = g2("ToggleGroupItem", e.__scopeToggleGroup), a = v2("ToggleGroupItem", e.__scopeToggleGroup), l2 = s2(e.__scopeToggleGroup), i2 = t.value.includes(e.value), p3 = a.disabled || e.disabled, u2 = { ...e, pressed: i2, disabled: p3 }, m3 = import_react2.default.useRef(null);
  return a.rovingFocus ? import_react2.default.createElement(Item, _extends({ asChild: true }, l2, { focusable: !p3, active: i2, ref: m3 }), import_react2.default.createElement(T, _extends({}, u2, { ref: o2 }))) : import_react2.default.createElement(T, _extends({}, u2, { ref: o2 }));
});
var T = import_react2.default.forwardRef((e, r) => {
  const { __scopeToggleGroup: t, value: a, ...l2 } = e, i2 = g2("ToggleGroupItem", t), p3 = { role: "radio", "aria-checked": e.pressed, "aria-pressed": void 0 }, s3 = "single" === i2.type ? p3 : void 0;
  return import_react2.default.createElement(Toggle, _extends({}, s3, l2, { ref: r, onPressedChange: (e2) => {
    e2 ? i2.onItemActivate(a) : i2.onItemDeactivate(a);
  } }));
});
var Root2 = ToggleGroup;
var Item2 = ToggleGroupItem;
export {
  Item2 as Item,
  Root2 as Root,
  ToggleGroup,
  ToggleGroupItem,
  p2 as createToggleGroupScope
};
//# sourceMappingURL=@radix-ui_react-toggle-group.js.map
