{
  "version": 3,
  "sources": ["../../../../../node_modules/@radix-ui/react-toggle/dist/packages/react/toggle/src/Toggle.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAgCA,IAAM,SAAS,AAAM,aAAuC,CAAC,GAAO,MAAA;AAClE,QAAA,EAAQ,SAAS,GAAX,gBAAwB,IAAA,OAAxB,iBAAgD,MAAoB,MAAgB,GAAA,CAEnF,IAAA,OAAiB,KAAc,qBAAqB,EACzD,MAAM,GACN,UAAU,GACV,aAAa,EAAA,CAAA;AAGf,SACE,AAAA,gBAAC,UAAU,QAAX,SAAA,EACE,MAAK,UACL,gBAAc,GACd,cAAY,IAAU,OAAO,OAC7B,iBAAe,EAAM,WAAW,KAAA,OAAK,GACjC,GALN,EAME,KAAK,GACL,SAAS,qBAAqB,EAAM,SAAS,MAAA;AACtC,MAAM,YACT,EAAA,CAAY,CAAA;EAAA,CAAA,EAAA,CAAA,CAAA;AAAA,CAAA;AAWtB,IAAM,OAAO;",
  "names": []
}
