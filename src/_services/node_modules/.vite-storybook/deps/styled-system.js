import {
  index_esm_default
} from "./chunk-CD62OOII.js";
import {
  require_object_assign
} from "./chunk-ONM5EPDC.js";
import {
  __toESM,
  init_define_import_meta_env
} from "./chunk-CCD2FOVN.js";

// dep:styled-system
init_define_import_meta_env();

// node_modules/styled-system/dist/index.esm.js
init_define_import_meta_env();

// node_modules/@styled-system/core/dist/index.esm.js
init_define_import_meta_env();
var import_object_assign = __toESM(require_object_assign());
var merge = function merge2(a, b) {
  var result = (0, import_object_assign.default)({}, a, b);
  for (var key in a) {
    var _assign;
    if (!a[key] || typeof b[key] !== "object")
      continue;
    (0, import_object_assign.default)(result, (_assign = {}, _assign[key] = (0, import_object_assign.default)(a[key], b[key]), _assign));
  }
  return result;
};
var sort = function sort2(obj) {
  var next = {};
  Object.keys(obj).sort(function(a, b) {
    return a.localeCompare(b, void 0, {
      numeric: true,
      sensitivity: "base"
    });
  }).forEach(function(key) {
    next[key] = obj[key];
  });
  return next;
};
var defaults = {
  breakpoints: [40, 52, 64].map(function(n) {
    return n + "em";
  })
};
var createMediaQuery = function createMediaQuery2(n) {
  return "@media screen and (min-width: " + n + ")";
};
var getValue = function getValue2(n, scale) {
  return get(scale, n, n);
};
var get = function get2(obj, key, def, p, undef) {
  key = key && key.split ? key.split(".") : [key];
  for (p = 0; p < key.length; p++) {
    obj = obj ? obj[key[p]] : undef;
  }
  return obj === undef ? def : obj;
};
var createParser = function createParser2(config9) {
  var cache = {};
  var parse = function parse2(props) {
    var styles = {};
    var shouldSort = false;
    var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;
    for (var key in props) {
      if (!config9[key])
        continue;
      var sx = config9[key];
      var raw = props[key];
      var scale = get(props.theme, sx.scale, sx.defaults);
      if (typeof raw === "object") {
        cache.breakpoints = !isCacheDisabled && cache.breakpoints || get(props.theme, "breakpoints", defaults.breakpoints);
        if (Array.isArray(raw)) {
          cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
          styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
          continue;
        }
        if (raw !== null) {
          styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
          shouldSort = true;
        }
        continue;
      }
      (0, import_object_assign.default)(styles, sx(raw, scale, props));
    }
    if (shouldSort) {
      styles = sort(styles);
    }
    return styles;
  };
  parse.config = config9;
  parse.propNames = Object.keys(config9);
  parse.cache = cache;
  var keys = Object.keys(config9).filter(function(k) {
    return k !== "config";
  });
  if (keys.length > 1) {
    keys.forEach(function(key) {
      var _createParser;
      parse[key] = createParser2((_createParser = {}, _createParser[key] = config9[key], _createParser));
    });
  }
  return parse;
};
var parseResponsiveStyle = function parseResponsiveStyle2(mediaQueries, sx, scale, raw, _props) {
  var styles = {};
  raw.slice(0, mediaQueries.length).forEach(function(value, i) {
    var media = mediaQueries[i];
    var style3 = sx(value, scale, _props);
    if (!media) {
      (0, import_object_assign.default)(styles, style3);
    } else {
      var _assign2;
      (0, import_object_assign.default)(styles, (_assign2 = {}, _assign2[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign2));
    }
  });
  return styles;
};
var parseResponsiveObject = function parseResponsiveObject2(breakpoints, sx, scale, raw, _props) {
  var styles = {};
  for (var key in raw) {
    var breakpoint = breakpoints[key];
    var value = raw[key];
    var style3 = sx(value, scale, _props);
    if (!breakpoint) {
      (0, import_object_assign.default)(styles, style3);
    } else {
      var _assign3;
      var media = createMediaQuery(breakpoint);
      (0, import_object_assign.default)(styles, (_assign3 = {}, _assign3[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign3));
    }
  }
  return styles;
};
var createStyleFunction = function createStyleFunction2(_ref) {
  var properties = _ref.properties, property = _ref.property, scale = _ref.scale, _ref$transform = _ref.transform, transform = _ref$transform === void 0 ? getValue : _ref$transform, defaultScale = _ref.defaultScale;
  properties = properties || [property];
  var sx = function sx2(value, scale2, _props) {
    var result = {};
    var n = transform(value, scale2, _props);
    if (n === null)
      return;
    properties.forEach(function(prop) {
      result[prop] = n;
    });
    return result;
  };
  sx.scale = scale;
  sx.defaults = defaultScale;
  return sx;
};
var system = function system2(args) {
  if (args === void 0) {
    args = {};
  }
  var config9 = {};
  Object.keys(args).forEach(function(key) {
    var conf = args[key];
    if (conf === true) {
      config9[key] = createStyleFunction({
        property: key,
        scale: key
      });
      return;
    }
    if (typeof conf === "function") {
      config9[key] = conf;
      return;
    }
    config9[key] = createStyleFunction(conf);
  });
  var parser = createParser(config9);
  return parser;
};
var compose = function compose2() {
  var config9 = {};
  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
    parsers[_key] = arguments[_key];
  }
  parsers.forEach(function(parser2) {
    if (!parser2 || !parser2.config)
      return;
    (0, import_object_assign.default)(config9, parser2.config);
  });
  var parser = createParser(config9);
  return parser;
};

// node_modules/@styled-system/layout/dist/index.esm.js
init_define_import_meta_env();
var isNumber = function isNumber2(n) {
  return typeof n === "number" && !isNaN(n);
};
var getWidth = function getWidth2(n, scale) {
  return get(scale, n, !isNumber(n) || n > 1 ? n : n * 100 + "%");
};
var config = {
  width: {
    property: "width",
    scale: "sizes",
    transform: getWidth
  },
  height: {
    property: "height",
    scale: "sizes"
  },
  minWidth: {
    property: "minWidth",
    scale: "sizes"
  },
  minHeight: {
    property: "minHeight",
    scale: "sizes"
  },
  maxWidth: {
    property: "maxWidth",
    scale: "sizes"
  },
  maxHeight: {
    property: "maxHeight",
    scale: "sizes"
  },
  size: {
    properties: ["width", "height"],
    scale: "sizes"
  },
  overflow: true,
  overflowX: true,
  overflowY: true,
  display: true,
  verticalAlign: true
};
var layout = system(config);
var index_esm_default2 = layout;

// node_modules/@styled-system/color/dist/index.esm.js
init_define_import_meta_env();
var config2 = {
  color: {
    property: "color",
    scale: "colors"
  },
  backgroundColor: {
    property: "backgroundColor",
    scale: "colors"
  },
  opacity: true
};
config2.bg = config2.backgroundColor;
var color = system(config2);
var index_esm_default3 = color;

// node_modules/@styled-system/typography/dist/index.esm.js
init_define_import_meta_env();
var defaults2 = {
  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
};
var config3 = {
  fontFamily: {
    property: "fontFamily",
    scale: "fonts"
  },
  fontSize: {
    property: "fontSize",
    scale: "fontSizes",
    defaultScale: defaults2.fontSizes
  },
  fontWeight: {
    property: "fontWeight",
    scale: "fontWeights"
  },
  lineHeight: {
    property: "lineHeight",
    scale: "lineHeights"
  },
  letterSpacing: {
    property: "letterSpacing",
    scale: "letterSpacings"
  },
  textAlign: true,
  fontStyle: true
};
var typography = system(config3);
var index_esm_default4 = typography;

// node_modules/@styled-system/flexbox/dist/index.esm.js
init_define_import_meta_env();
var config4 = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: true,
  justifySelf: true,
  alignSelf: true,
  order: true
};
var flexbox = system(config4);
var index_esm_default5 = flexbox;

// node_modules/@styled-system/grid/dist/index.esm.js
init_define_import_meta_env();
var defaults3 = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
};
var config5 = {
  gridGap: {
    property: "gridGap",
    scale: "space",
    defaultScale: defaults3.space
  },
  gridColumnGap: {
    property: "gridColumnGap",
    scale: "space",
    defaultScale: defaults3.space
  },
  gridRowGap: {
    property: "gridRowGap",
    scale: "space",
    defaultScale: defaults3.space
  },
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridAutoRows: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var grid = system(config5);
var index_esm_default6 = grid;

// node_modules/@styled-system/border/dist/index.esm.js
init_define_import_meta_env();
var config6 = {
  border: {
    property: "border",
    scale: "borders"
  },
  borderWidth: {
    property: "borderWidth",
    scale: "borderWidths"
  },
  borderStyle: {
    property: "borderStyle",
    scale: "borderStyles"
  },
  borderColor: {
    property: "borderColor",
    scale: "colors"
  },
  borderRadius: {
    property: "borderRadius",
    scale: "radii"
  },
  borderTop: {
    property: "borderTop",
    scale: "borders"
  },
  borderTopLeftRadius: {
    property: "borderTopLeftRadius",
    scale: "radii"
  },
  borderTopRightRadius: {
    property: "borderTopRightRadius",
    scale: "radii"
  },
  borderRight: {
    property: "borderRight",
    scale: "borders"
  },
  borderBottom: {
    property: "borderBottom",
    scale: "borders"
  },
  borderBottomLeftRadius: {
    property: "borderBottomLeftRadius",
    scale: "radii"
  },
  borderBottomRightRadius: {
    property: "borderBottomRightRadius",
    scale: "radii"
  },
  borderLeft: {
    property: "borderLeft",
    scale: "borders"
  },
  borderX: {
    properties: ["borderLeft", "borderRight"],
    scale: "borders"
  },
  borderY: {
    properties: ["borderTop", "borderBottom"],
    scale: "borders"
  }
};
config6.borderTopWidth = {
  property: "borderTopWidth",
  scale: "borderWidths"
};
config6.borderTopColor = {
  property: "borderTopColor",
  scale: "colors"
};
config6.borderTopStyle = {
  property: "borderTopStyle",
  scale: "borderStyles"
};
config6.borderTopLeftRadius = {
  property: "borderTopLeftRadius",
  scale: "radii"
};
config6.borderTopRightRadius = {
  property: "borderTopRightRadius",
  scale: "radii"
};
config6.borderBottomWidth = {
  property: "borderBottomWidth",
  scale: "borderWidths"
};
config6.borderBottomColor = {
  property: "borderBottomColor",
  scale: "colors"
};
config6.borderBottomStyle = {
  property: "borderBottomStyle",
  scale: "borderStyles"
};
config6.borderBottomLeftRadius = {
  property: "borderBottomLeftRadius",
  scale: "radii"
};
config6.borderBottomRightRadius = {
  property: "borderBottomRightRadius",
  scale: "radii"
};
config6.borderLeftWidth = {
  property: "borderLeftWidth",
  scale: "borderWidths"
};
config6.borderLeftColor = {
  property: "borderLeftColor",
  scale: "colors"
};
config6.borderLeftStyle = {
  property: "borderLeftStyle",
  scale: "borderStyles"
};
config6.borderRightWidth = {
  property: "borderRightWidth",
  scale: "borderWidths"
};
config6.borderRightColor = {
  property: "borderRightColor",
  scale: "colors"
};
config6.borderRightStyle = {
  property: "borderRightStyle",
  scale: "borderStyles"
};
var border = system(config6);
var index_esm_default7 = border;

// node_modules/@styled-system/background/dist/index.esm.js
init_define_import_meta_env();
var config7 = {
  background: true,
  backgroundImage: true,
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true
};
config7.bgImage = config7.backgroundImage;
config7.bgSize = config7.backgroundSize;
config7.bgPosition = config7.backgroundPosition;
config7.bgRepeat = config7.backgroundRepeat;
var background = system(config7);
var index_esm_default8 = background;

// node_modules/@styled-system/position/dist/index.esm.js
init_define_import_meta_env();
var defaults4 = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
};
var config8 = {
  position: true,
  zIndex: {
    property: "zIndex",
    scale: "zIndices"
  },
  top: {
    property: "top",
    scale: "space",
    defaultScale: defaults4.space
  },
  right: {
    property: "right",
    scale: "space",
    defaultScale: defaults4.space
  },
  bottom: {
    property: "bottom",
    scale: "space",
    defaultScale: defaults4.space
  },
  left: {
    property: "left",
    scale: "space",
    defaultScale: defaults4.space
  }
};
var position = system(config8);
var index_esm_default9 = position;

// node_modules/@styled-system/space/dist/index.esm.js
init_define_import_meta_env();
var defaults5 = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
};
var isNumber3 = function isNumber4(n) {
  return typeof n === "number" && !isNaN(n);
};
var getMargin = function getMargin2(n, scale) {
  if (!isNumber3(n)) {
    return get(scale, n, n);
  }
  var isNegative = n < 0;
  var absolute = Math.abs(n);
  var value = get(scale, absolute, absolute);
  if (!isNumber3(value)) {
    return isNegative ? "-" + value : value;
  }
  return value * (isNegative ? -1 : 1);
};
var configs = {};
configs.margin = {
  margin: {
    property: "margin",
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginTop: {
    property: "marginTop",
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginRight: {
    property: "marginRight",
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginBottom: {
    property: "marginBottom",
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginLeft: {
    property: "marginLeft",
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginX: {
    properties: ["marginLeft", "marginRight"],
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  },
  marginY: {
    properties: ["marginTop", "marginBottom"],
    scale: "space",
    transform: getMargin,
    defaultScale: defaults5.space
  }
};
configs.margin.m = configs.margin.margin;
configs.margin.mt = configs.margin.marginTop;
configs.margin.mr = configs.margin.marginRight;
configs.margin.mb = configs.margin.marginBottom;
configs.margin.ml = configs.margin.marginLeft;
configs.margin.mx = configs.margin.marginX;
configs.margin.my = configs.margin.marginY;
configs.padding = {
  padding: {
    property: "padding",
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingTop: {
    property: "paddingTop",
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingRight: {
    property: "paddingRight",
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingBottom: {
    property: "paddingBottom",
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingLeft: {
    property: "paddingLeft",
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingX: {
    properties: ["paddingLeft", "paddingRight"],
    scale: "space",
    defaultScale: defaults5.space
  },
  paddingY: {
    properties: ["paddingTop", "paddingBottom"],
    scale: "space",
    defaultScale: defaults5.space
  }
};
configs.padding.p = configs.padding.padding;
configs.padding.pt = configs.padding.paddingTop;
configs.padding.pr = configs.padding.paddingRight;
configs.padding.pb = configs.padding.paddingBottom;
configs.padding.pl = configs.padding.paddingLeft;
configs.padding.px = configs.padding.paddingX;
configs.padding.py = configs.padding.paddingY;
var margin = system(configs.margin);
var padding = system(configs.padding);
var space = compose(margin, padding);

// node_modules/@styled-system/shadow/dist/index.esm.js
init_define_import_meta_env();
var shadow = system({
  boxShadow: {
    property: "boxShadow",
    scale: "shadows"
  },
  textShadow: {
    property: "textShadow",
    scale: "shadows"
  }
});
var index_esm_default10 = shadow;

// node_modules/@styled-system/variant/dist/index.esm.js
init_define_import_meta_env();
var variant = function variant2(_ref) {
  var _config;
  var scale = _ref.scale, _ref$prop = _ref.prop, prop = _ref$prop === void 0 ? "variant" : _ref$prop, _ref$variants = _ref.variants, variants = _ref$variants === void 0 ? {} : _ref$variants, key = _ref.key;
  var sx;
  if (Object.keys(variants).length) {
    sx = function sx2(value, scale2, props) {
      return index_esm_default(get(scale2, value, null))(props.theme);
    };
  } else {
    sx = function sx2(value, scale2) {
      return get(scale2, value, null);
    };
  }
  sx.scale = scale || key;
  sx.defaults = variants;
  var config9 = (_config = {}, _config[prop] = sx, _config);
  var parser = createParser(config9);
  return parser;
};
var buttonStyle = variant({
  key: "buttons"
});
var textStyle = variant({
  key: "textStyles",
  prop: "textStyle"
});
var colorStyle = variant({
  key: "colorStyles",
  prop: "colors"
});

// node_modules/styled-system/dist/index.esm.js
var width = index_esm_default2.width;
var height = index_esm_default2.height;
var minWidth = index_esm_default2.minWidth;
var minHeight = index_esm_default2.minHeight;
var maxWidth = index_esm_default2.maxWidth;
var maxHeight = index_esm_default2.maxHeight;
var size = index_esm_default2.size;
var verticalAlign = index_esm_default2.verticalAlign;
var display = index_esm_default2.display;
var overflow = index_esm_default2.overflow;
var overflowX = index_esm_default2.overflowX;
var overflowY = index_esm_default2.overflowY;
var opacity = index_esm_default3.opacity;
var fontSize = index_esm_default4.fontSize;
var fontFamily = index_esm_default4.fontFamily;
var fontWeight = index_esm_default4.fontWeight;
var lineHeight = index_esm_default4.lineHeight;
var textAlign = index_esm_default4.textAlign;
var fontStyle = index_esm_default4.fontStyle;
var letterSpacing = index_esm_default4.letterSpacing;
var alignItems = index_esm_default5.alignItems;
var alignContent = index_esm_default5.alignContent;
var justifyItems = index_esm_default5.justifyItems;
var justifyContent = index_esm_default5.justifyContent;
var flexWrap = index_esm_default5.flexWrap;
var flexDirection = index_esm_default5.flexDirection;
var flex = index_esm_default5.flex;
var flexGrow = index_esm_default5.flexGrow;
var flexShrink = index_esm_default5.flexShrink;
var flexBasis = index_esm_default5.flexBasis;
var justifySelf = index_esm_default5.justifySelf;
var alignSelf = index_esm_default5.alignSelf;
var order = index_esm_default5.order;
var gridGap = index_esm_default6.gridGap;
var gridColumnGap = index_esm_default6.gridColumnGap;
var gridRowGap = index_esm_default6.gridRowGap;
var gridColumn = index_esm_default6.gridColumn;
var gridRow = index_esm_default6.gridRow;
var gridAutoFlow = index_esm_default6.gridAutoFlow;
var gridAutoColumns = index_esm_default6.gridAutoColumns;
var gridAutoRows = index_esm_default6.gridAutoRows;
var gridTemplateColumns = index_esm_default6.gridTemplateColumns;
var gridTemplateRows = index_esm_default6.gridTemplateRows;
var gridTemplateAreas = index_esm_default6.gridTemplateAreas;
var gridArea = index_esm_default6.gridArea;
var borderWidth = index_esm_default7.borderWidth;
var borderStyle = index_esm_default7.borderStyle;
var borderColor = index_esm_default7.borderColor;
var borderTop = index_esm_default7.borderTop;
var borderRight = index_esm_default7.borderRight;
var borderBottom = index_esm_default7.borderBottom;
var borderLeft = index_esm_default7.borderLeft;
var borderRadius = index_esm_default7.borderRadius;
var backgroundImage = index_esm_default8.backgroundImage;
var backgroundSize = index_esm_default8.backgroundSize;
var backgroundPosition = index_esm_default8.backgroundPosition;
var backgroundRepeat = index_esm_default8.backgroundRepeat;
var zIndex = index_esm_default9.zIndex;
var top = index_esm_default9.top;
var right = index_esm_default9.right;
var bottom = index_esm_default9.bottom;
var left = index_esm_default9.left;
var style = function style2(_ref) {
  var prop = _ref.prop, cssProperty = _ref.cssProperty, alias = _ref.alias, key = _ref.key, transformValue = _ref.transformValue, scale = _ref.scale, properties = _ref.properties;
  var config9 = {};
  config9[prop] = createStyleFunction({
    properties,
    property: cssProperty || prop,
    scale: key,
    defaultScale: scale,
    transform: transformValue
  });
  if (alias)
    config9[alias] = config9[prop];
  var parse = createParser(config9);
  return parse;
};
export {
  alignContent,
  alignItems,
  alignSelf,
  background,
  backgroundImage,
  backgroundPosition,
  backgroundRepeat,
  backgroundSize,
  border,
  borderBottom,
  borderColor,
  borderLeft,
  borderRadius,
  borderRight,
  borderStyle,
  borderTop,
  borderWidth,
  index_esm_default7 as borders,
  bottom,
  index_esm_default10 as boxShadow,
  buttonStyle,
  color,
  colorStyle,
  compose,
  createParser,
  createStyleFunction,
  display,
  flex,
  flexBasis,
  flexDirection,
  flexGrow,
  flexShrink,
  flexWrap,
  flexbox,
  fontFamily,
  fontSize,
  fontStyle,
  fontWeight,
  get,
  grid,
  gridArea,
  gridAutoColumns,
  gridAutoFlow,
  gridAutoRows,
  gridColumn,
  gridColumnGap,
  gridGap,
  gridRow,
  gridRowGap,
  gridTemplateAreas,
  gridTemplateColumns,
  gridTemplateRows,
  height,
  justifyContent,
  justifyItems,
  justifySelf,
  layout,
  left,
  letterSpacing,
  lineHeight,
  margin,
  maxHeight,
  maxWidth,
  minHeight,
  minWidth,
  opacity,
  order,
  overflow,
  overflowX,
  overflowY,
  padding,
  position,
  right,
  shadow,
  size,
  space,
  style,
  system,
  textAlign,
  index_esm_default10 as textShadow,
  textStyle,
  top,
  typography,
  variant,
  verticalAlign,
  width,
  zIndex
};
//# sourceMappingURL=styled-system.js.map
