{
  "version": 3,
  "sources": ["../../../../../node_modules/@radix-ui/react-compose-refs/dist/packages/react/compose-refs/src/composeRefs.tsx", "../../../../../node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx", "../../../../../node_modules/@radix-ui/react-primitive/dist/packages/react/primitive/src/Primitive.tsx", "../../../../../node_modules/@radix-ui/react-use-callback-ref/dist/packages/react/use-callback-ref/src/useCallbackRef.tsx", "../../../../../node_modules/@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx", "../../../../../node_modules/@radix-ui/primitive/dist/packages/core/primitive/src/primitive.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n", "import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n", "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\n\nconst NODES = [\n  'a',\n  'button',\n  'div',\n  'h2',\n  'h3',\n  'img',\n  'li',\n  'nav',\n  'ol',\n  'p',\n  'span',\n  'svg',\n  'ul',\n] as const;\n\n// Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// prettier-ignore\ntype PropsWithoutRef<P> = P extends any ? ('ref' extends keyof P ? Pick<P, Exclude<keyof P, 'ref'>> : P) : P;\ntype ComponentPropsWithoutRef<T extends React.ElementType> = PropsWithoutRef<\n  React.ComponentProps<T>\n>;\n\ntype Primitives = { [E in typeof NODES[number]]: PrimitiveForwardRefComponent<E> };\ntype PrimitivePropsWithRef<E extends React.ElementType> = React.ComponentPropsWithRef<E> & {\n  asChild?: boolean;\n};\n\ninterface PrimitiveForwardRefComponent<E extends React.ElementType>\n  extends React.ForwardRefExoticComponent<PrimitivePropsWithRef<E>> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/\n\nconst Primitive = NODES.reduce(\n  (primitive, node) => ({\n    ...primitive,\n    [node]: React.forwardRef((props: PrimitivePropsWithRef<typeof node>, forwardedRef: any) => {\n      const { asChild, ...primitiveProps } = props;\n      const Comp: any = asChild ? Slot : node;\n\n      React.useEffect(() => {\n        (window as any)[Symbol.for('radix-ui')] = true;\n      }, []);\n\n      // DEPRECATED\n      if (process.env.NODE_ENV === 'development' && (props as any).as) {\n        console.warn(AS_ERROR);\n      }\n\n      return <Comp {...primitiveProps} ref={forwardedRef} />;\n    }),\n  }),\n  {} as Primitives\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst AS_ERROR = `Warning: The \\`as\\` prop has been removed in favour of \\`asChild\\`. For details, see https://radix-ui.com/docs/primitives/overview/styling#changing-the-rendered-element`;\n\nconst Root = Primitive;\n\nexport {\n  Primitive,\n  //\n  Root,\n};\nexport type { ComponentPropsWithoutRef, PrimitivePropsWithRef };\n", "import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n", "import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n", "function composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (checkForDefaultPrevented === false || !((event as unknown) as Event).defaultPrevented) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\nexport { composeEventHandlers };\n"],
  "mappings": "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",
  "names": []
}
